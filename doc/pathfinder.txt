*pathfinder.txt*		       Enhanced file and URL search for Neovim
						     Last change: 2025 June 07
								  *pathfinder*
==============================================================================
							 *pathfinder-contents*
TABLE OF CONTENTS 

Enhanced multiline search for Neovim ............................. |pathfinder|
Summary .................................................. |pathfinder-summary|
Default Usage ...................................... |pathfinder-default-usage|
Configuration ...................................... |pathfinder-configuration|
    Search Behaviour ..................... |pathfinder-config-search-behaviour|
    File Resolution ....................... |pathfinder-config-file-resolution|
    URL Resolution ......................... |pathfinder-config-url-resolution|
    User Interaction ..................... |pathfinder-config-user-interaction|
tmux Integration ............................................ |pathfinder-tmux|
Navigation Functions ........................ |pathfinder-navigation-functions|
    next_file() ........................................ |pathfinder-next_file|
    prev_file() ........................................ |pathfinder-prev_file|
    next_url() .......................................... |pathfinder-next_url|
    prev_url() .......................................... |pathfinder-prev_url|
UI Functions ........................................ |pathfinder-ui-functions|
    select_file() .................................... |pathfinder-select_file|
    select_file_line() .......................... |pathfinder-select_file_line|
    select_url() ...................................... |pathfinder-select_url|
    hover_description() ........................ |pathfinder-hover_description|
Filetype Overrides ............................ |pathfinder-filetype-overrides|
Custom Key Mappings .............................. |pathfinder-custom-key-maps|

==============================================================================
							  *pathfinder-summary*
SUMMARY

Pathfinder is a Neovim plugin that extends the `gf`, `gF`, and `gx` commands
for navigating to files and URLs.

It enhances file/URL resolution with:

  - Whole document/line look-ahead with optional count.
  - Optional user selection for ambiguous file names.
  - Support for GitHub-style owner/repo links.
  - Configurable multi-character enclosure pairs.
  - Configurable file opening modes (e.g. edit, split, or a custom function).
  - `Filetype`-specific overrides for all config options.
  - Future extensibility for use with external programs.
  - Retains compatibility with (almost) all standard `gf`, `gF`, and `gx` behaviour.

By default, this plugin remaps `gf`, `gF`, and `gx` to provide these
enhancements, although this can be disabled in favour of custom keymaps.

The functions |select_file|, |select_file_line|, and |select_url| are
also provided, mapped to `<leader>gf`, `<leader>gF`, and `<leader>gx` by
default. Inspired by other plugins, namely `EasyMotion`, these functions
display all file-and-line or URL/repo/flake targets in the current visible
window area, allowing the user to open any target in as few keystrokes as
possible.

See the Neovim |gf|, |gF|, and |gx| documentation for more complete usage
including variables. Where usage differs from this is noted herein.

Note that this plugin is only compatible with Neovim versions >= 0.10.0.

------------------------------------------------------------------------------
						    *pathfinder-default-usage*
DEFAULT USAGE 

When active, `[count]gf` opens the count'th valid file at or after the cursor,
scanning over multiple lines, checking the current working directory and
`vim.bo.path`. It will automatically append extensions from
|associated_filetypes| or 'suffixesadd', and search for files in both plain
text (|scan_unenclosed_words|) and per-filetype enclosing characters
(|enclosure_pairs|), depending on configuration.

`[count]gF` usage is similar to `gf`, however its default behaviour is to open
the next file after the cursor, placing the cursor at the count'th line. It
will also attempt to open a file while placing the cursor at a specific line
and column (if `use_column_numbers` is `true`) if this is specified after the
file names.

Examples:
	eval.c:10:10 ~
	eval.c @ 20 ~
	eval.c (30) ~
	eval.c 40 ~
	eval.c on line 50, column 20 ~

If multiple files exist with the same name but different extension (where the
extension is not specified explicitly), a prompt will ask which to open. This
behaviour can be toggled by |offer_multiple_options|, with the first file
found with a matching extension in |associated_filetypes| or 'suffixesadd'
being selected automatically if this is false.

Like `[count]gf`, `[count]gx` will open the count'th valid URL, repository, or
flake (specified by |url_providers| / |flake_providers|) at or after the
cursor.

Key Features: ~
  - Resolves files with extensions from |associated_filetypes| and 'suffixesadd'.
  - Uses 'includeexpr' for custom file name candidate modification.
  - Recognizes file paths enclosed in characters defined by |enclosure_pairs|.
  - Scans unenclosed words if |scan_unenclosed_words| is enabled.
  - Displays a selection menu for multiple valid files if
    |offer_multiple_options| is true.
  - URLs, git forges, and flakes tested in order for opening web links.

With Counts: ~
  - `gf`        Opens the next valid file.
  - `gF`        The same as `gf` but with optional line count, e.g. `file:10`.
  - `gx`        Opens the next valid web link (URL, git repo, or flake).
  - `[count]gf` Opens the count'th valid file.
  - `[count]gF` Opens the next valid file at the count'th line.
  - `[count]gx` Opens the count'th valid web link (URL, git repo, or flake).

==============================================================================
						    *pathfinder-configuration*
CONFIGURATION 

Configure the plugin by calling `require('pathfinder').setup(config)`, where
`config` is an optional table overriding default settings. Calling the setup
function is not required unless you wish to override any default values.

Defaults ~
>lua
 require('pathfinder').setup({
     forward_limit = -1,
     scan_unenclosed_words = true,
     use_column_numbers = true,
     open_mode = "edit",
     reuse_existing_window = true,
     gF_count_behaviour = "nextfile",
     validate_urls = false,
     max_path_length = 4096,
     associated_filetypes = {},
     url_providers = {
         "https://github.com/%s.git",
     },
     flake_providers = {
     	github = "https://github.com/%s",
     	gitlab = "https://gitlab.com/%s",
     	sourcehut = "https://git.sr.ht/%s",
     },
     enclosure_pairs = {
         ["("] = ")",
         ["{"] = "}",
         ["["] = "]",
         ["<"] = ">",
         ['"'] = '"',
         ["'"] = "'",
         ["`"] = "`",
     },
     url_enclosure_pairs = nil,
     includeexpr = nil,
     ft_overrides = {},
     remap_default_keys = true,
     offer_multiple_options = true,
     pick_from_all_windows = true,
     selection_keys = { "a", "s", "d", "f", "j", "k", "l" },
     tmux_mode = false,
 })
<

						 *pathfinder-highlight-groups*
Highlight Groups ~

The |select_file| and |select_file_line| functions use the following default
highlight groups, which may be overridden:

>lua
 vim.api.nvim_set_hl(0, "PathfinderDim",	     { fg = "#808080", bg = "none" })
 vim.api.nvim_set_hl(0, "PathfinderHighlight",       { fg = "#DDDDDD", bg = "none" })
 vim.api.nvim_set_hl(0, "PathfinderNumberHighlight", { fg = "#00FF00", bg = "none" })
 vim.api.nvim_set_hl(0, "PathfinderColumnHighlight", { fg = "#FFFF00", bg = "none" })
 vim.api.nvim_set_hl(0, "PathfinderNextKey",	     { fg = "#FF00FF", bg = "none" })
 vim.api.nvim_set_hl(0, "PathfinderFutureKeys",      { fg = "#BB00AA", bg = "none" })
<

-------------------------------------------------------------------------------
					  *pathfinder-config-search-behaviour*
SEARCH BEHAVIOUR


						    *pathfinder-forward-limit*
forward_limit ~
Default: `-1` (integer)

    This specifies the maximum number of lines to search beyond the current
    line (inclusive). If set to `-1`, then the search will only take place
    throughout the currently visible window area. Set it to `0` to search
    until the end of the buffer, or to `1` to only search ahead of the cursor
    on the current line, best approximating default `gf` and `gF` behaviour.
    Generally, a large limit such as `10000` is recommended instead of
    searching the entire buffer, as this can take an unacceptably long time to
    complete for very large files with no nearby file or URL/repo/flake
    targets.

					    *pathfinder-scan_unenclosed_words*
scan_unenclosed_words ~
Default: `true` (boolean)

    Toggle scanning for unenclosed (plain text) file candidates (`true`), or
    only those enclosed by characters defined in |enclosure_pairs| (`false`).
    Setting this to true, may significantly increase execution delay without
    being beneficial to many filetypes. For now, this is enabled by default,
    although this may change. It's recommended to enable this option for
    filetypes that don't have well-defined file enclosures, such as plain text
    files. The file candidate under the cursor isn't affected by this setting
    and may be plain text regardless.

					       *pathfinder-use_column_numbers*
use_column_numbers ~
Default: `true` (boolean)

    If `true`, both `gF` (if no count is supplied) and |select_file_line| will
    additionally place the cursor at an optional column number, supplied
    after the line number, if found.

							*pathfinder-open_mode*
open_mode ~
Default: `"edit"` (string|function)

    Determines how Pathfinder opens files:

      - `String`: any Exâ€‘command that opens a file, e.g. `"edit"`, `"vsplit"`.
        Pathfinder will run:  
          :{open_mode} [+<line>] <filepath>

      - `Function` (filepath: string, linenr?: integer, colnr?: integer):
	receives the escaped absolute path and optional line and column
	numbers (nil if not supplied). You may use this to implement custom
	opening logic (notifications, external tools, etc). Column number
	will always be nil if `use_column_numbers` is false.

					    *pathfinder-reuse_existing_window*
reuse_existing_window ~
Default: `true` (boolean)

    If the target file is already open in a tab/window, go to that window and
    line number (for `gF`). If the file isn't currently open in an active
    window, then `open_mode` will be used.

					       *pathfinder-gF_count_behaviour*
gF_count_behaviour ~
Default: `"nextfile"` (string)

    Behaviour for `[count]gF`. Options are `"nextfile"` (always open the next
    available file and use count as line number) or `"buffer"` (use count as
    file index, same as `gf`). Note that `gF_count_behavior` also maps to this
    to account for regionalized spelling.

						    *pathfinder-validate_urls*
validate_urls ~
Default: `false` (boolean)

    Behaviour for `next_url` and `prev_url`. If `true`, all URL/repo/flake
    targets will be validated (checked for a 2xx status code). This can
    significantly slow down target navigation and so is disabled by default.

-------------------------------------------------------------------------------
					   *pathfinder-config-file-resolution*
FILE RESOLUTION

						  *pathfinder-max_path_length*
max_path_length ~
Default: `4096` (integer)

    Don't check any paths longer than this. The default value aligns with or
    exceeds the maximum total path length allowed by most file systems. Set
    this higher to handle edge cases or lower to increase performance.

					     *pathfinder-associated_filetypes*
associated_filetypes ~
Default: `{}` (string[])

    An ordered list of file extensions to try for file candidates without a
    specified extension. This takes precedence over 'suffixesadd', which is
    also used. If |offer_multiple_options| is `false`, then the first valid
    extension found in this list or 'suffixesadd', will be opened
    automatically. There is typically no reason to prefer this over
    per-filetype 'suffixesadd' (which is the preferred vim way), however this
    setting exists to avoid interfering with other plugins which may set
    'suffixesadd' directly.

						  *pathfinder-enclosure_pairs*
enclosure_pairs ~
Default:
>lua
 {
      ["("] = ")",
      ["{"] = "}",
      ["["] = "]",
      ["<"] = ">",
      ['"'] = '"',
      ["'"] = "'",
      ["`"] = "`",
 }	
<
(table)

    Table of opening and closing delimiters for file paths. This is used to
    identify file paths enclosed by characters in the current buffer.
    Enclosures may span multiple characters (e.g. HTML tags).

						      *pathfinder-includeexpr*
includeexpr ~
Default: `nil` (string)

    A helper function to set 'includeexpr'.

						     *pathfinder-ft_overrides*
ft_overrides ~
Default: `{}` (table)

    Filetype specific overrides. Keys are Neovim filetypes (e.g. `tex`), and
    values are tables overriding the global settings. Only options that are
    specified within a filetype key overwrite the global config and are
    applied whenever the current buffer's 'filetype' matches that key.

    Example: ~
>lua
    ft_overrides = {
	tex = {
	    enclosure_pairs = {
		["{"] = "}",
	    },
	    associated_filetypes = { ".tex", ".sty", ".cls", ".bib" },
	},
	lua = {
	    scan_unenclosed_words = true,
	    includeexpr = "substitute(v:fname,'\\.\\w*','','')",
	},
    }
<
     This plugin also loads filetype handlers from its `ft/` directory (e.g.
     `ft/tex.lua`). See |pathfinder-filetype-overrides|. User-defined
     `ft_overrides` take precedence over these handlers.

-------------------------------------------------------------------------------
					    *pathfinder-config-url-resolution*
URL RESOLUTION

					      *pathfinder-url_enclosure_pairs*
url_enclosure_pairs ~
Default: `nil` (table)

    If set, then functions as |enclosure_pairs|, superseding this option for
    URL/repo/flake selection targets.

------------------------------------------------------------------------------
					  *pathfinder-config-user-interaction*
USER INTERACTION

					       *pathfinder-remap_default_keys*
remap_default_keys ~
Default: `true` (boolean)

    Remap the default `gf`, `gF`, and `gx` keys, as well as setting up
    `<leader>` variants of these for visual selection, e.g. `<leader>gf`. If
    this is `false`, no keys will be mapped and you will need to set your own
    custom key mappings.

					   *pathfinder-offer_multiple_options*
offer_multiple_options ~
Default: `true` (boolean)

    If multiple files are found with the same name but different extensions, a
    prompt will ask which to open. If this is `false`, the first file found with
    a matching extension in |associated_filetypes| or 'suffixesadd' will be
    opened automatically.

					    *pathfinder-pick_from_all_windows*
pick_from_all_windows ~
Default: `true` (boolean)

    If `true`, |select_file|, |select_file_line|, and |select_url| will
    offer targets across all visible windows, not just the active window.

						   *pathfinder-selection_keys*
selection_keys ~
Default: `{ "a", "s", "d", "f", "j", "k", "l" }` (string[])

    Keys used for user input when |select_file| is called. Useful for users
    of non-QWERTY layouts.

							*pathfinder-tmux_mode*
tmux_mode ~
Default: `false` (boolean)

    When `true` and running inside a tmux session, the visual selection
    functions, |select_file|, |select_file_line|, and |select_url| will
    operate on the content of the last active tmux pane. This allows you to
    select file paths or URLs/repos/flakes that appear in other terminal panes
    without leaving Neovim.

==============================================================================
							     *pathfinder-tmux*
TMUX INTEGRATION 

If you work with Neovim inside a tmux session, Pathfinder can extend its
visual selection capabilities to other tmux panes. When enabled, this feature
captures the visible text of the last-accessed pane and uses that content as
the source for |select_file|, |select_file_line|, and |select_url|.

This is useful for workflows where you might list files in a shell (e.g. with
`ls`, `find`, or from compiler outputs) in one pane and then jump to one of
those files from within Neovim in another pane.

This mode can be enabled via the |pathfinder-tmux_mode| setting or controlled
dynamically with the user commands and Lua functions below. These have no
effect if you are not in a tmux environment.

						      *pathfinder-tmux_toggle*
:PathfinderTmuxToggle ~
    Toggles tmux integration mode on or off. This can also be called as a Lua
    function. It has no default key mapping, but can be set with, e.g:
>lua
    vim.keymap.set("n", "<leader>t", require("pathfinder").tmux_toggle, {
        desc = "Pathfinder: Toggle tmux Mode",
	silent = true,
    })
<

							  *pathfinder-tmux_on*
:PathfinderTmuxOn ~
    Enables tmux integration mode. This can also be called as a Lua function:
>lua
    require("pathfinder").tmux_on()
<

							 *pathfinder-tmux_off*
:PathfinderTmuxOff ~
    Disables tmux integration mode. This can also be called as a Lua function:
>lua
    require("pathfinder").tmux_off()
<

==============================================================================
					     *pathfinder-navigation-functions*
NAVIGATION FUNCTIONS

							*pathfinder-next_file*
next_file(count) ~
    Navigates to the count'th valid file after the cursor in the current
    buffer. Mapped to `]f` by default.

							*pathfinder-prev_file*
prev_file(count) ~
    Navigates to the count'th valid file before the cursor in the current
    buffer. Mapped to `[f` by default.

							 *pathfinder-next_url*
next_url(count) ~
    Navigates to the count'th URL, owner/repo, or flake target after the
    cursor in the current buffer. This looks for strings starting https:// or
    http://, as well as those matching an owner/repo or flake format. By
    default, links won't be validated (checked that they return a 2xx status
    code) due to performance concerns, however this may be enabled via setting
    |validate_urls|. Mapped to `]u` by default.

							 *pathfinder-prev_url*
prev_url(count) ~
    Navigates to the count'th URL, owner/repo, or flake target before the
    cursor in the current buffer. This looks for strings starting https:// or
    http://, as well as those matching an owner/repo or flake format. By
    default, links won't be validated (checked that they return a 2xx status
    code) due to performance concerns, however this may be enabled via setting
    |validate_urls|. Mapped to `[u` by default.

==============================================================================
						     *pathfinder-ui-functions*
UI FUNCTIONS

						      *pathfinder-select_file*
select_file() ~
    Inspired by plugins such as `EasyMotion` and `Hop`, this function displays
    all visible valid files in the current buffer and allows the user to
    select which one to open based on motion targets. This function is mapped
    to `<leader>gf` by default.

    Function-specific options are |reuse_existing_window|,
    |pick_from_all_windows|, and |selection_keys|.

    The colour scheme used by this function is configurable via highlight
    groups. See |pathfinder-highlight-groups|.

						 *pathfinder-select_file_line*
select_file_line() ~
    Similar to `select_file()`, but also displays and navigates to associated
    line numbers (if present). This function is mapped to `<leader>gF` by
    default.

						       *pathfinder-select_url*
select_url() ~
    Similar to `select_file()`, but displays and navigates to URLs, repos, and
    flakes (as specified by |url_providers| and |flake_providers|
    respectively). This function is mapped to `<leader>gx` by default.

    Function-specific options are |url_enclosure_pairs|,
    |pick_from_all_windows|, and |selection_keys|.

						*pathfinder-hover_description*
hover_description() ~
    Tries to retrieve a description from the HTML header of the URL, repo, or
    flake under the cursor. This function has no default key mapping, but can
    be set with, e.g:
>lua
    vim.keymap.set("n", "<leader>h", require("pathfinder").hover_description,
    {
        desc = "Pathfinder: Hover",
        silent = true,
    })
<
==============================================================================
					       *pathfinder-filetype-overrides*
FILETYPE OVERRIDES

This plugin includes a template for filetype-specific configurations, aiming
to provide sensible defaults for common filetypes. Currently, only
`ft/tex.lua` is included, although users are encouraged to submit pull
requests for additional filetypes they would like to see supported. The added
filetype handlers are quite powerful and can overwrite functions within the
plugin (e.g. to defer logic to an external program); however in most cases,
overriding the default configuration should suffice.

==============================================================================
						  *pathfinder-custom-key-maps*
CUSTOM KEY MAPPINGS

To use custom key mappings instead of the defaults, set |remap_default_keys|
to `false` in the configuration. For example:
>lua
 require('pathfinder').setup({
     remap_default_keys = false,
 })
 vim.keymap.set('n', 'gf', require('pathfinder').gf)
 vim.keymap.set('n', 'gF', require('pathfinder').gF)
 vim.keymap.set('n', 'gx', require('pathfinder').gx)
 vim.keymap.set('n', '<leader>gf', require('pathfinder').select_file)
 vim.keymap.set('n', '<leader>gF', require('pathfinder').select_file_line)
 vim.keymap.set('n', "<leader>gx", require('pathfinder').select_url)
 vim.keymap.set("n", "<leader>h", require("pathfinder").hover_description, {
     desc = "Pathfinder: URL Hover Description",
     silent = true,
 })
 vim.keymap.set("n", "<leader>t", require("pathfinder").tmux_toggle, {
     desc = "Pathfinder: Toggle tmux Mode",
     silent = true,
 })
<
vim:tw=78:ts=8:noet:ft=help:norl:
