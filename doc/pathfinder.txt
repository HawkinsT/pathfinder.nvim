*pathfinder.txt*	Enhanced multiline gf/gF and file searching for Neovim
			Version 0.1.0	            Last change: 2025 March 18
								  *pathfinder*
==============================================================================
							 *pathfinder-contents*
TABLE OF CONTENTS 

Enhanced multiline search for Neovim ............................. |pathfinder|
Summary .................................................. |pathfinder-summary|
Default Usage ...................................... |pathfinder-default-usage|
Configuration ...................................... |pathfinder-configuration|
    Search Behaviour ............................ |pathfinder-search-behaviour|
    File Resolution .............................. |pathfinder-file-resolution|
    User Interaction ............................ |pathfinder-user-interaction|
Functions .............................................. |pathfinder-functions|
    select_file() .................................. |pathfinder-select_file|
    select_file_line() ........................ |pathfinder-select_file_line|
Filetype Overrides ............................ |pathfinder-filetype-overrides|
Custom Key Mappings .............................. |pathfinder-custom-key-maps|

==============================================================================
							  *pathfinder-summary*
SUMMARY

pathfinder is a Neovim plugin that extends the built-in `gf` and `gF` commands
for navigating to files under the cursor. It enhances file resolution with:

  - Whole document/line look-ahead with optional count.
  - Nearest file before cursor in single line mode if no file after.
  - Optional user selection for ambiguous file names.
  - Designated `filetype` enclosures.
  - Configurable file opening modes (e.g. current buffer, split, tab).
  - `Filetype`-specific overrides for all config options.
  - Future extensibility for use with external programs.
  - Retains compatibility with (almost) all standard `gf` and `gF` behaviour.

By default, this plugin remaps `gf` and `gF` to provide these enhancements,
although this can be disabled and custom keymaps used.

The function |pathfinder-select_file| is also provided, but unmapped by
default. Inspired by other plugins, namely `EasyMotion`, it displays all file
targets in the current visible area, allowing the user to open any in as few
keystrokes as possible.

Note that this plugin is only compatible with Neovim versions >= 0.9.0.

------------------------------------------------------------------------------
						    *pathfinder-default-usage*
DEFAULT USAGE 

When active, `[count]gf` opens the count'th valid file after the cursor,
scanning over multiple lines, checking the current working directory and
`vim.bo.path`. It will try to add file extensions where specified in
|pathfinder-configuration| or by 'suffixesadd', and search for files in both
plain text (|scan_unenclosed_words|) and per-filetype enclosing characters
(|enclosure_pairs|), depending on configuration.

`[count]gF` usage is similar to `gf`, however its default behaviour is to open
the next file after the cursor, placing the cursor at the count'th line. It
will also attempt to open a file while placing the cursor at a specific line
if this is specified after the file names.

Examples:
	eval.c:10 ~
	eval.c @ 20 ~
	eval.c (30) ~
	eval.c 40 ~

If multiple files exist with the same name but different extension (where the
extension is not specified explicitly), a prompt will ask which to open. This
behaviour can be toggled by |offer_multiple_options|, with the first file found
found with a matching extension in |associated_filetypes| of 'suffixesadd' being
selected automatically if this is false.

Key Features: ~
  - Resolves files with extensions from |associated_filetypes| and 'suffixesadd'.
  - Uses 'includeexpr' for custom file name candidate modification.
  - Recognizes file paths enclosed in characters defined by |enclosure_pairs|.
  - Scans unenclosed words if |scan_unenclosed_words| is enabled.
  - Displays a selection menu for multiple valid files if
    |offer_multiple_options| is true.

With Counts: ~
  - `gf`        Opens the next valid file.
  - `gF`        Opens the next file, taking optional line count, e.g. `file:10`.
  - `[count]gf` Opens the count'th valid file.
  - `[count]gF` Opens the next valid file with the cursor at the count'th line.

 See the |gf| and |gF| documentation for more complete usage including
 variables. Where usage differs from this is noted herein.

==============================================================================
							   *pathfinder-config*
CONFIGURATION 

 Configure the plugin by calling `require('pathfinder').setup(config)`, where
 `config` is an optional table overriding default settings. Calling the setup
 function is not required unless you wish to override any default values.

Defaults ~
>lua
    require('pathfinder').setup({
 	forward_limit = -1,
 	scan_unenclosed_words = true,
	open_mode = "edit",
 	gF_count_behaviour = "nextfile",
 	associated_filetypes = {},
 	enclosure_pairs = {
	    ["("] = ")",
	    ["{"] = "}",
	    ["["] = "]",
	    ["<"] = ">",
	    ['"'] = '"',
	    ["'"] = "'",
	    ["`"] = "`",
	},
	includeexpr = "",
	ft_overrides = {},
	offer_multiple_options = true,
	remap_default_keys = true,
	selection_keys = { "a", "s", "d", "f", "j", "k", "l" },
    })
<

						 *pathfinder-highlight-groups*
Highlight Groups ~

The |select_file| and |select_file_line| functions use the following default highlight groups, which
may be overridden:

>lua
    vim.api.nvim_set_hl(0, "PathfinderDim",	   { fg = "#808080", bg = "none" })
    vim.api.nvim_set_hl(0, "PathfinderHighlight",  { fg = "#DDDDDD", bg = "none" })
    vim.api.nvim_set_hl(0, "PathfinderNextKey",	   { fg = "#FF00FF", bg = "none" })
    vim.api.nvim_set_hl(0, "PathfinderFutureKeys", { fg = "#BB00AA", bg = "none" })
<

-------------------------------------------------------------------------------
					  *pathfinder-config-search-behaviour*
SEARCH BEHAVIOUR


						    *pathfinder-forward-limit*
forward_limit ~
Default: `-1` (integer)

    This specifies the maximum number of lines to search beyond the current
    line (inclusive). If set to `-1`, then the search will only take place
    throughout the currently visible buffer area. Set to `1` to only search
    ahead of the cursor on the current cursor line, best approximating default
    `gf` and `gF` behaviour.

					    *pathfinder-scan_unenclosed_words*
scan_unenclosed_words ~
Default: `true` (boolean)

    Toggle scanning for unenclosed (plain text) file candidates (`true`), or
    only those enclosed by characters defined in |enclosure_pairs| (`false`).
    Setting this to true, may significantly increase execution delay without
    being beneficial to many filetypes. For now, this is enabled by default,
    although this may change. It's recommended to enable this option for
    filetypes that don't have well-defined file enclosures, such as plain text
    files. The file candidate under the cursor isn't affected by this setting
    and may be plain text regardless.

							*pathfinder-open_mode*
open_mode ~
Default: `"edit"` (string|function)

    Determines how Pathfinder opens files.

    This setting accepts two types:

      - `String`: any Exâ€‘command that opens a file, e.g. `"edit"`, `"vsplit"`.
        Pathfinder will run:  
          :{open_mode} [+<line>] <filepath>

      - `Function` (filepath: string, linenr?: integer): receives the escaped
	absolute path and an optional line number (nil if not supplied). You
	may this to implement custom opening logic (notifications, external
	tools, etc).

					       *pathfinder-gF_count_behaviour*
gF_count_behaviour ~
Default: `"nextfile"` (string)

    Behaviour for `[count]gF`. Options are `"nextfile"` (always open the next
    available file and use count as line number) or `"buffer"` (use count as
    file index, same as `gf`). Note that `gF_count_behavior` also maps to this
    to account for regionalized spelling.

-------------------------------------------------------------------------------
					   *pathfinder-config-file-resolution*
FILE RESOLUTION

					     *pathfinder-associated_filetypes*
associated_filetypes ~
Default: `{}` (string[])

    An ordered list of file extensions to try for file candidates without a
    specified extension. This takes precedence over 'suffixesadd', which is
    also used. If |offer_multiple_options| is `false`, the first valid
    extension found in this list, or if this fails, then the first valid
    extension found in 'suffixesadd', will be opened automatically. There is
    no reason to prefer this over per-filetype 'suffixesadd' (which is the
    preferred vim way), however this setting exists to avoid interfering with
    other plugins which may set 'suffixesadd' directly.

						  *pathfinder-enclosure_pairs*
enclosure_pairs ~
Default:
>
	{
		["("] = ")",
		["{"] = "}",
		["["] = "]",
		["<"] = ">",
		['"'] = '"',
		["'"] = "'",
		["`"] = "`",
	}	
<
(table)

    Table of opening and closing delimiters for file paths. This is used to
    identify file paths enclosed by characters in the current buffer.
    Enclosures can be one or multiple characters in length, e.g. parts of html
    tags.

						       *pathfinder-includeexpr
includeexpr ~
Default: `""` (string)

    A helper function to set 'includeexpr'.

						     *pathfinder-ft_overrides*
ft_overrides ~
Default: `{}` (table)

    Filetype specific overrides. Keys are Neovim filetypes (e.g. `tex`), and
    values are tables overriding the global settings. Only options that are
    specified within a filetype key overwrite the global config and are
    applied whenever the current buffer's 'filetype' matches that key.

    Example: ~
>lua
    ft_overrides = {
	tex = {
	    enclosure_pairs = {
		["{"] = "}",
	    },
	    associated_filetypes = { ".tex", ".sty", ".cls", ".bib" },
	},
	lua = {
	    scan_unenclosed_words = true,
	    includeexpr = "substitute(v:fname,'\\.\\w*','','')",
	},
    }
<
     This plugin also loads filetype handlers from its `ft/` directory (e.g.
     `ft/tex.lua`). See |filetype-overrides|. User-defined `ft_overrides` take
     precedence over these handlers.

------------------------------------------------------------------------------
					  *pathfinder-config-user-interaction*
USER INTERACTION

					   *pathfinder-offer_multiple_options*
offer_multiple_options ~
Default: `true` (boolean)

    If multiple files are found with the same name but different extensions, a
    prompt will ask which to open. If this is `false`, the first file found with
    a matching extension in |associated_filetypes| of 'suffixesadd' will be
    opened automatically.

					       *pathfinder-remap_default_keys*
remap_default_keys ~
Default: `false` (boolean)

    Remap default `gf` and `gF` keys. If this is `false`, the default keys
    will not be remapped and you will need to set your own key mappings.

						   *pathfinder-selection_keys*
selection_keys ~
Default: `{ "a", "s", "d", "f", "j", "k", "l" }` (string[])

    Keys used for user input when |select_file| is called. Useful for users
    of non-qwerty layouts.

==============================================================================
							*pathfinder-functions*
FUNCTIONS

						     *pathfinder-select_file*
select_file() ~
Inspired by plugins such as `EasyMotion` and `Hop`, this function displays all
visible valid files in the current buffer and allows the user to select which
one to open based on motion targets. This function is mapped to `<leader>gf`
by default.

The colour scheme used by this function is configurable via highlight groups.
See |pathfinder-highlight-groups|.

Note that |offer_multiple_options| isn't currently implemented with this
function.


						     *pathfinder-select_file_line*
select_file_line() ~
Inspired by plugins such as `EasyMotion` and `Hop`, this function displays all
visible valid files in the current buffer and allows the user to select which
one to open on line based on motion targets. 
This function is mapped to `<leader>gF` by default.

The colour scheme used by this function is configurable via highlight groups.
See |pathfinder-highlight-groups|.

Note that |offer_multiple_options| isn't currently implemented with this
function.


==============================================================================
					       *pathfinder-filetype-overrides*
FILETYPE OVERRIDES

This plugin provides a template for filetype-specific configurations, aiming
to provide sensible defaults for common filetypes. Currently, only
`ft/tex.lua` is included, although users are encouraged to submit pull
requests for additional filetypes they would like to see supported. The added
filetype handlers are quite powerful and can overwrite functions within the
plugin (e.g. to defer logic to an external program); however in most cases,
overriding the default configuration should suffice.

==============================================================================
						  *pathfinder-custom-key-maps*
CUSTOM KEY MAPPINGS

If you wish to use custom key mappings without the default remapping, you can
do so by setting |remap_default_keys| to `false` in the configuration and
setting your own key mappings. For example:
>lua
 require('pathfinder').setup({
     remap_default_keys = false,
 })
 vim.keymap.set('n', 'gf', require('pathfinder').gf)
 vim.keymap.set('n', 'gF', require('pathfinder').gF)
 vim.keymap.set('n', '<leader>gf', require('pathfinder').select_file)
 vim.keymap.set('n', '<leader>gF', require('pathfinder').select_file_line)
<
vim:tw=78:ts=8:noet:ft=help:norl:
